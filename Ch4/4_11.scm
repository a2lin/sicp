(define (make-frame variables values)
  (define (make-frame-list variables values)
    (if (null? variables)
      '()
      (cons (cons (car variables) (car values)) (make-frame-list (cdr variables) (cdr values)))))
  (make-frame-list variables values))

(define (add-binding-to-frame! var val frame)
  (cons (cons var val) frame))

(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan bindings)
      (cond ((null? bindings)
             (env-loop (enclosing-environment env)))
            ((eq? var (caar bindings)) (cdar bindings))
            (else (scan (cdr bindings)))))
    (if (eq? env the-empty-environment)
      (error "Unbound variable" var)
      (let ((frame (first-frame env)))
        (scan frame))))
  (env-loop env))

(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan bindings)
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
            ((eq? var (caar bindings)) (set-car! bindings (cons var val)))
            (else (scan (cdr bindings)))))
    (if (eq? env the-empty-environment)
      (error "Unbound variable: SET!" var)
      (let ((frame (first-frame env)))
        (scan frame))))
  (env-loop env))

(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (define (scan bindings)
      (cond ((null? bindings)
             (add-binding-to-frame! var val frame))
            ((eq? var (caar bindings)) (set-car! bindings (cons var val)))
            (else (scan (cdr bindings))))))
  (scan frame))
