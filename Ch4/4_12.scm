(define (scan-vars vars vals null-fn fn)
  (cond ((null? vars)
         (null-fn))
        ((eq? var (car vars)) (fn vars vals))
        (else (scan (cdr vars) (cdr vals)))))

(define (lookup-variable-value var env)
  (define (env-loop env)
    (scan-vars vars vals (lambda () (env-loop (enclosing-environment env))) (lambda (vars vals) (car vals)))
    (if (eq? env the-empty-environment)
      (error "Unbound variable" var)
      (let ((frame (first-frame env)))
        (scan-vars (frame-variables frame) (frame-values frame)
                   (lambda () (env-loop (enclosing-environment env))) 
                   (lambda (vars vals) (car vals))))))
  (env-loop env))

(define (set-variable-value! var val env)
  (define (env-loop env)
    (if (eq? env the-empty-environment)
      (error "Unbound variable: SET!" var)
      (let ((frame (first-frame env)))
        (scan-vars (frame-variables frame) (frame-values frame) 
                   (lambda () (env-loop (enclosing-environment env))) 
                   (lambda (vars vals) (set-car! vals val))))))
  (env-loop env))

(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (scan-vars (frame-variables frame) (frame-values frame) 
               (lambda () add-binding-to-frame! var val frame) 
               (lambda (vars vals) (set-car! vals val)))))
