(define (make-deque) (cons '() '() '()))
(define (front-ptr deque) (car deque))
(define (rear-ptr deque) (cdr deque))
(define (set-front-ptr! deque item) (set-car! deque item))
(define (set-rear-ptr! deque item) (set-cdr! deque item))
(define (empty-deque? deque) (null? (front-ptr deque)))
(define (front-deque deque)
  (if (empty-deque? deque)
    (error "FRONT called with an empty deque" deque)
    (car (front-ptr deque))))
(define (rear-deque deque)
  (if (empty-deque? deque)
    (error "REAR called with an empty deque" deque)
    (car (rear-ptr deque))))
(define (front-insert-deque! deque ele)
  (let ((new-pair (cons ele (front-ptr deque))))
    (cond (empty-queue? deque) (set-front-ptr! new-pair) (set-rear-ptr! new-pair)
          (else) (set-front-ptr! new-pair))))
(define (rear-insert-deque! deque ele)
  (let ((new-pair (cons (rear-ptr deque) ele)))
    (cond (empty-queue? deque) (set-front-ptr! new-pair) (set-rear-ptr! new-pair)
          (set-rear-ptr! new-pair))))
(define (front-delete-deque!) (


