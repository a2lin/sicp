(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (sum? x)
  (if (pair? x)
    (if (eq? (car x) '+)
      #t
      (sum? (cdr x)))
    #f))

(define (addend s) (car (break-sum s)))
(define (augend s) 
  (if (null? (cdr (cadr (break-sum s))))
    (caadr (break-sum s))
    (cadr (break-sum s))))

(define (append-fix a b)
  (cond ((and (pair? a) (pair? b)) (append a b))
        ((pair? a) (append a (list b)))
        ((pair? b) (append (list a) b))
        (else (append (list a) (list b)))))
    
(define (break-sum s)
  (if (eq? (cadr s) '+)
    (list (car s) (cddr s))
    (let ((sum-rest (break-sum (cddr s))))
        (list (append-fix (append-fix (car s) (cadr s)) (car sum-rest)) (cadr sum-rest)))))

(define (product? x)
  (and (pair? x) (eq? (cadr x) '*)))
(define (multiplier p) (car p))
(define (multiplicand p) (caddr p))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list '+ a1 a2))))
(define (=number? exp num)
  (and (number? exp) (= exp num)))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list '* m1 m2))))
(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
           (make-product (multiplier exp)
                         (deriv (multiplicand exp) var))
           (make-product (deriv (multiplier exp) var)
                         (multiplicand exp))))
        (else
          (error "unknown expression type -- DERIV" exp))))

(deriv '(x + 3 * (x + y + 2)) 'x)
(deriv '(x + (3 * (x + (y + 2)))) 'x)
